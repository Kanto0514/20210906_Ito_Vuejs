{"remainingRequest":"/Users/itoumikihito/Documents/COACHTECH/Web応用/router-pj/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/itoumikihito/Documents/COACHTECH/Web応用/router-pj/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/itoumikihito/Documents/COACHTECH/Web応用/router-pj/src/App.vue","mtime":1628255624180},{"path":"/Users/itoumikihito/Documents/COACHTECH/Web応用/router-pj/node_modules/cache-loader/dist/cjs.js","mtime":1621146108816},{"path":"/Users/itoumikihito/Documents/COACHTECH/Web応用/router-pj/node_modules/vue-loader/lib/index.js","mtime":1627963386744}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbmV3TmFtZTogIiIsCiAgICAgIG5ld0VtYWlsOiAiIiwKICAgICAgY29udGFjdExpc3RzOiBbXSwKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBnZXRDb250YWN0KCkgewogICAgICBjb25zdCByZXNEYXRhID0gYXdhaXQgYXhpb3MuZ2V0KCJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2NvbnRhY3QvIik7CiAgICAgIHRoaXMuY29udGFjdExpc3RzID0gcmVzRGF0YS5kYXRhLmRhdGE7CiAgICB9LAogICAgYXN5bmMgaW5zZXJ0Q29udGFjdCgpIHsKICAgICAgY29uc3Qgc2VuZERhdGEgPSB7CiAgICAgICAgbmFtZTogdGhpcy5uZXdOYW1lLAogICAgICAgIGVtYWlsOiB0aGlzLm5ld0VtYWlsLAogICAgICB9OwogICAgICBhd2FpdCBheGlvcy5wb3N0KCJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2NvbnRhY3QvIiwgc2VuZERhdGEpOwogICAgICBhd2FpdCB0aGlzLmdldENvbnRhY3QoKTsKICAgIH0sCiAgICBhc3luYyB1cGRhdGVDb250YWN0KGlkLCBuYW1lLCBlbWFpbCkgewogICAgICBjb25zdCBzZW5kRGF0YSA9IHsKICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgIGVtYWlsOiBlbWFpbCwKICAgICAgfTsKICAgICAgYXdhaXQgYXhpb3MucHV0KCJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2NvbnRhY3QvIiArIGlkLCBzZW5kRGF0YSk7CiAgICAgIGF3YWl0IHRoaXMuZ2V0Q29udGFjdCgpOwogICAgfSwKICAgIGFzeW5jIGRlbGV0ZUNvbnRhY3QoaWQpIHsKICAgICAgYXdhaXQgYXhpb3MuZGVsZXRlKCJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2NvbnRhY3QvIiArIGlkKTsKICAgICAgYXdhaXQgdGhpcy5nZXRDb250YWN0KCk7CiAgICB9LAogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuZ2V0Q29udGFjdCgpOwogIH0sCn07Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>連絡先アプリ</h1>\n    <div class=\"new\">\n      <h2>新規作成</h2>\n      <div class=\"name\">\n        <label for=\"name\">お名前：</label>\n        <input type=\"text\" name=\"name\" id=\"name\" v-model=\"newName\" />\n      </div>\n      <div class=\"email\">\n        <label for=\"email\">メールアドレス：</label>\n        <input type=\"email\" name=\"email\" id=\"email\" v-model=\"newEmail\" />\n      </div>\n      <button @click=\"insertContact\">新規作成</button>\n    </div>\n    <div class=\"table\">\n      <h2>連絡先リスト</h2>\n      <table>\n        <tr>\n          <th>ID</th>\n          <th>NAME</th>\n          <th>EMAIL</th>\n          <th>UPDATE</th>\n          <th>DELETE</th>\n        </tr>\n        <tr v-for=\"item in contactLists\" :key=\"item.id\">\n          <td>{{ item.id }}</td>\n          <td><input type=\"text\" v-model=\"item.name\" /></td>\n          <td><input type=\"email\" v-model=\"item.email\" /></td>\n          <td>\n            <button @click=\"updateContact(item.id, item.name, item.email)\">\n              更新\n            </button>\n          </td>\n          <td>\n            <button @click=\"deleteContact(item.id)\">削除</button>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      newName: \"\",\n      newEmail: \"\",\n      contactLists: [],\n    };\n  },\n  methods: {\n    async getContact() {\n      const resData = await axios.get(\"http://127.0.0.1:8000/api/contact/\");\n      this.contactLists = resData.data.data;\n    },\n    async insertContact() {\n      const sendData = {\n        name: this.newName,\n        email: this.newEmail,\n      };\n      await axios.post(\"http://127.0.0.1:8000/api/contact/\", sendData);\n      await this.getContact();\n    },\n    async updateContact(id, name, email) {\n      const sendData = {\n        name: name,\n        email: email,\n      };\n      await axios.put(\"http://127.0.0.1:8000/api/contact/\" + id, sendData);\n      await this.getContact();\n    },\n    async deleteContact(id) {\n      await axios.delete(\"http://127.0.0.1:8000/api/contact/\" + id);\n      await this.getContact();\n    },\n  },\n  created() {\n    this.getContact();\n  },\n};\n</script>\n\n<style>\ntable,\ntd,\nth {\n  border: 1px solid #000;\n  border-collapse: collapse;\n  text-align: center;\n}\ntd,\nth {\n  padding: 5px;\n}\nth {\n  background: #f0e6cc;\n}\n</style>"]}]}